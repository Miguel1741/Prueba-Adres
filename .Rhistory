tipos %>% dplyr::select(bike.id) %>% distinct() %>% unlist() %>% as.vector() %>% length()
tipos %>% dplyr::select(bike.id) %>% unlist() %>% as.vector() %>% length()
ordenes %>% dplyr::select(order.id) %>% distinct() %>% unlist() %>% as.vector() %>% length()
ordenes %>% dplyr::select(order.id) %>% unlist() %>% as.vector() %>% length()
ordenes %>% dplyr::select(product.id) %>% distinct() %>% unlist() %>% as.vector() %>% length()
ordenes %>% dplyr::select(product.id) %>% unlist() %>% as.vector() %>% length()
tiendas %>% dplyr::select(bikeshop.id) %>% distinct() %>% unlist() %>% as.vector() %>% length()
tiendas %>% dplyr::select(bikeshop.id) %>% unlist() %>% as.vector() %>% length()
unificacion <- tiendas %>% left_join(ordenes)
names(tiendas)
names(ordenes)
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line'))
ordenes %>% dplyr::select(order.id) %>% distinct() %>% unlist() %>% as.vector() %>% length()
ordenes %>% dplyr::select(order.id) %>% unlist() %>% as.vector() %>% length()
ordenes %>% dplyr::select(order.line) %>% distinct() %>% unlist() %>% as.vector() %>% length()
ordenes %>% dplyr::select(order.line) %>% unlist() %>% as.vector() %>% length()
names(tipos)
names(ordenes)
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
dim(unificacion)
ensayo <- head(unificacion, 20)
ensayo
names(ensayo)
ensayo %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain'))
ensayo %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
names(unificacion)
head(unificacion$location)
gsub('.*,', '', head(unificacion$location))
gsub('.*, ', '', head(unificacion$location))
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', head(unificacion$location)))
)
unificacion
names(unificacion)
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', head(unificacion$location))))
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', location)))
names(unificacion)
unificacion
table(unificacion$States)
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(State == 'FL'  ~ Renevue)
)
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', location)))
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(States == 'FL'  ~ Renevue))
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', location)))
names(unificacion)
unificacion$Revenue
names(unificacion)
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', location)))
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(States == 'FL'  ~ Revenue))
quantile(unificacion$`Renevue Quantiles`)
quantile(unificacion$`Renevue Quantiles`, na.omit = T)
na.omit(unificacion$`Renevue Quantiles`)
quantile(na.omit(unificacion$`Renevue Quantiles`))
quantile(na.omit(unificacion$`Renevue Quantiles`))[2]
quantile(na.omit(unificacion$`Renevue Quantiles`))[4]
q1 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[2]
q2 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[4]
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(`Renevue Quantiles` < q1  ~ 'Low', `Renevue Quantiles` > q2  ~ 'High', True ~ 'Medium'))
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', location)))
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(States == 'FL'  ~ Revenue))
q1 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[2]
q2 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[4]
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(`Renevue Quantiles` < q1  ~ 'Low', `Renevue Quantiles` > q2  ~ 'High', `Renevue Quantiles` > q1 & `Renevue Quantiles` < q2   ~ 'Medium'))
write.xlsx(unificacion, 'prueba.xlsx')
getwd()
q1
q2
library(ggplot2)
diamonds <- ggplot2::diamonds
summary(diamonds)
summary(diamonds$carat)
summary(diamonds$cut)
library(sloop)
install.packages('sloop')
library(sloop)
otype(1:10)
otype(mtcars)
library(stats4)
mle <- stats4::mle(function(x = 1) (x - 2) ^ 2)
otype(mle)
mle_obj <- stats4::mle(function(x = 1) (x - 2) ^ 2)
otype(mle_obj)
is.objet(1:10)
is.object(1:10)
sloop::otype(1:10)
is.object(mtcars)
sloop::otype(mtcars)
attr(1:10, 'class')
attr(mtcars, 'class')
x <- matrix(1:4, nrow = 2)
class(x)
sloop::s3_class(x)
typeof(1:10)
typeof(mtcars)
typeof(NULL)
typeof(1L)
typeof(li)
typeof(1i)
typeof(mean)
typeof(´[´)
typeof(´[´)
typeof(`[`)
typeof(sum)
typeof(globalenv())
mle_obj <- stats4::mle(function(x = 1) (x - 2) ^ 2)
typeof(mle_obj)
quote(a)
typeof(quote(a))
typeof(quote(a + 1))
type(formals(mean))
typeof(formals(mean))
formals(mean)
quote(a + 1)
sloop::s3_class(1)
sloop::s3_class(1L)
typeof(factor('x'))
is.numeric(factor('x'))
factor(c('x', 'y'))
typeof(factor(c('x', 'y')))
mean(factor(c('x', 'y')))
f <- factor(c('a', 'b', 'c'))
typeof(f)
attributes(f)
unclass(f)
ftype(print)
ftype(str)
ftype(unclass)
print(f)
print(unclass(f))
time <- strptime(c('2017-01-01', '2020-05-05 03:21'), '%Y-%m-%d')
time
str(time)
str(unclass(time))
s3_dispatch(print(f))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
robustbase, mvoutlier, RColorBrewer, GWmodel, rgal, maptools, spdep,
gpclib, leaflet, dplyr, readxl, KernSmooth, sp, maps, rgdal, spatstat, ads,
data.table, parallel, doParallel, gridExtra, htmlwidgets, openxlsx, tibble,
maditr, FactoMineR, factoextra, ape, elsa
)
rm(list = ls())
usuario <- paste0('C:/Users/', Sys.info()[["user"]]) # lee el usuario del pc
complemento <- "/Documents"
scr <-  paste0(usuario, complemento)
setwd(scr)
tipos <- read_excel('Bikes/Bikes.xlsx')
ordenes <- read_excel('orderlines/orderlines.xlsx')
tiendas <- read_excel('Bikes_Shops/bikeshops.xlsx')
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
dim(unificacion)
rm(list = ls())
usuario <- paste0('C:/Users/', Sys.info()[["user"]]) # lee el usuario del pc
complemento <- "/Documents"
scr <-  paste0(usuario, complemento)
setwd(scr)
tipos <- read_excel('Bikes/Bikes.xlsx')
ordenes <- read_excel('orderlines/orderlines.xlsx')
tiendas <- read_excel('Bikes_Shops/bikeshops.xlsx')
unificacion <- tiendas %>% inner_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
dim(unificacion)
rm(list = ls())
usuario <- paste0('C:/Users/', Sys.info()[["user"]]) # lee el usuario del pc
complemento <- "/Documents"
scr <-  paste0(usuario, complemento)
setwd(scr)
tipos <- read_excel('Bikes/Bikes.xlsx')
ordenes <- read_excel('orderlines/orderlines.xlsx')
tiendas <- read_excel('Bikes_Shops/bikeshops.xlsx')
unificacion <- tiendas %>% inner_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', location)))
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(States == 'FL'  ~ Revenue))
q1 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[2]
q2 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[4]
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(`Renevue Quantiles` < q1  ~ 'Low',
`Renevue Quantiles` > q2  ~ 'High',
`Renevue Quantiles` > q1 & `Renevue Quantiles` < q2   ~ 'Medium'))
dim(unificacion)
rm(list = ls())
usuario <- paste0('C:/Users/', Sys.info()[["user"]]) # lee el usuario del pc
complemento <- "/Documents"
scr <-  paste0(usuario, complemento)
setwd(scr)
tipos <- read_excel('Bikes/Bikes.xlsx')
ordenes <- read_excel('orderlines/orderlines.xlsx')
tiendas <- read_excel('Bikes_Shops/bikeshops.xlsx')
unificacion <- tiendas %>% inner_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
inner_join(tipos, by = c('product.id' = 'bike.id'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', location)))
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(States == 'FL'  ~ Revenue))
q1 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[2]
q2 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[4]
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(`Renevue Quantiles` < q1  ~ 'Low',
`Renevue Quantiles` > q2  ~ 'High',
`Renevue Quantiles` > q1 & `Renevue Quantiles` < q2   ~ 'Medium'))
dim(unificacion)
tipos <- read_excel('Bikes/Bikes.xlsx')
ordenes <- read_excel('orderlines/orderlines.xlsx')
tiendas <- read_excel('Bikes_Shops/bikeshops.xlsx')
unificacion <- tiendas %>% left_join(ordenes, by = c('bikeshop.id' = 'order.line')) %>%
left_join(tipos, by = c('product.id' = 'bike.id'))
unificacion <- unificacion %>% mutate('category' = case_when(description %like% 'Mountain' ~ 'Mountain', description %like% 'Road' ~ 'Road'))
unificacion$Revenue = unificacion$quantity * unificacion$price
unificacion <- unificacion %>% mutate('States' = case_when(model %like% 'Supersix' ~ gsub('.*, ', '', location)))
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(States == 'FL'  ~ Revenue))
q1 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[2]
q2 <- quantile(na.omit(unificacion$`Renevue Quantiles`))[4]
unificacion <- unificacion %>% mutate('Renevue Quantiles' = case_when(`Renevue Quantiles` < q1  ~ 'Low',
`Renevue Quantiles` > q2  ~ 'High',
`Renevue Quantiles` > q1 & `Renevue Quantiles` < q2   ~ 'Medium'))
dim(unificacion)
23*17
1500000-935000
(1500000-935000) * -1
(1500000-935000) * -1 + 935000
27*3
27*5
4*7
40*4
40*4*3857
12*4*4*3857
4*3857
1800/4
800/4
1100000/15428
sys.time()
Sys.time()
vector <- runif(1000)
vector
vector <- rbinom(1000, 20, 0.6)
vector
vector <- rbinom(1000, 200, 0.6)
vector
runif(1000)
runif(1000) * 1000
round(runif(1000) * 1000, 0)
vector <- round(runif(1000) * 1000, 0)
inicial <- Sys.time()
#  Burbuja
for (k in 1:(length(vector) - 1)){
for (w in 1:k) {
if (vector[w] > vector[k]){
aux = vector[w]
vector[w] = vector[w + 1]
vector[w + 1] = auxiliar
}
}
}
vector <- round(runif(1000) * 1000, 0)
inicial <- Sys.time()
#  Burbuja
for (k in 1:(length(vector) - 1)){
for (w in 1:k) {
if (vector[w] > vector[k]){
aux = vector[w]
vector[w] = vector[w + 1]
vector[w + 1] = aux
}
}
}
final <- Sys.time()
final - inicial
izq <- 2; der <- length(vector); k <- length(vector)
izq <- 2; der <- length(vector); k <- length(vector)
inicial <- Sys.time()
while(der >= izq) {
for (i in der:izq) {
if (vector[i - 1] > vector[i]) {
aux = vector[i - 1]
vector[i - 1] = vector[i]
vector[i] = aux
k = i
}
}
izq = k + 1
for (i in izq:der){
if(vector[i - 1] > vector[i]) {
aux = vector[i - 1]
vector[i - 1] = vector[i]
vector[i] = aux
k = i
}
}
der = k - 1
}
final <- Sys.time()
final - inicial
floor(0.349898388934)
floor(12.349898388934)
vector_original <- round(runif(1000) * 1000, 0)
vector <- vector_original
inicial <- Sys.time()
#  Burbuja
for (k in 1:(length(vector) - 1)){
for (w in 1:k) {
if (vector[w] > vector[k]){
aux = vector[w]
vector[w] = vector[w + 1]
vector[w + 1] = aux
}
}
}
final <- Sys.time()
final - inicial
vector <- vector_original
izq <- 2; der <- length(vector); k <- length(vector)
inicial <- Sys.time()
while(der >= izq) {
for (i in der:izq) {
if (vector[i - 1] > vector[i]) {
aux = vector[i - 1]
vector[i - 1] = vector[i]
vector[i] = aux
k = i
}
}
izq = k + 1
for (i in izq:der){
if(vector[i - 1] > vector[i]) {
aux = vector[i - 1]
vector[i - 1] = vector[i]
vector[i] = aux
k = i
}
}
der = k - 1
}
final <- Sys.time()
final - inicial
vector <- vector_original
N <- length(vector)
int <- N  + 1
inicial <- Sys.time()
while(int > 1){
int = floor(int / 2)
band = TRUE
while(band = TRUE){
N <- length(vector)
int <- N  + 1
inicial <- Sys.time()
while(int > 1){
int = floor(int / 2)
band = TRUE
while(band == TRUE){
band = FALSE
i <- 1
while((i + int) <= N){
if (vector[i] > vector[i + int]) {
aux = vector[i]
vector[i] = vector[i + int]
vector[i + int] = aux
band = TRUE
}
i = i + 1
}
}
}
final <- Sys.time()
final - inicial
vector_original <- round(runif(1000) * 1000, 0)
vector <- vector_original
inicial <- Sys.time()
#  Burbuja
for (k in 1:(length(vector) - 1)){
for (w in 1:k) {
if (vector[w] > vector[k]){
aux = vector[w]
vector[w] = vector[w + 1]
vector[w + 1] = aux
}
}
}
final <- Sys.time()
final - inicial
# Shake
vector <- vector_original
izq <- 2; der <- length(vector); k <- length(vector)
inicial <- Sys.time()
while(der >= izq) {
for (i in der:izq) {
if (vector[i - 1] > vector[i]) {
aux = vector[i - 1]
vector[i - 1] = vector[i]
vector[i] = aux
k = i
}
}
izq = k + 1
for (i in izq:der){
if(vector[i - 1] > vector[i]) {
aux = vector[i - 1]
vector[i - 1] = vector[i]
vector[i] = aux
k = i
}
}
der = k - 1
}
final <- Sys.time()
final - inicial
# Shell
vector <- vector_original
N <- length(vector)
int <- N  + 1
inicial <- Sys.time()
while(int > 1){
int = floor(int / 2)
band = TRUE
while(band == TRUE){
band = FALSE
i <- 1
while((i + int) <= N){
if (vector[i] > vector[i + int]) {
aux = vector[i]
vector[i] = vector[i + int]
vector[i + int] = aux
band = TRUE
}
i = i + 1
}
}
}
final <- Sys.time()
final - inicial
library(readxl)
datos <- read_excel('C:/Users/Asus/Documents/Prueba Adres/Prestadores.xls')
datos <- readxl::read_excel(path = path.expand('C:/Users/Asus/Documents/Prueba Adres/Prestadores.xls'))
datos <- readxl::read_excel(path = path.expand('C:/Users/Asus/Documents/Prueba Adres/Prestadores.zip))
)
)
)
)
)
)
)
library('RSQLite')
library(RSQLite)
con <- dbConnect(drv=RSQLite::SQLite(), DBNAME='Prueba')
tables <- dbList(con)
tables <- dbListTables(con)
tables <- tables[tables != "sqlite_sequence"]
lDataFrames <- vector("list", length=length(tables))
for (i in seq(along=tables)) {
lDataFrames[[i]] <- dbGetQuery(conn=con, statement=paste("SELECT * FROM '", tables[[i]], "'", sep=""))
}
con <- dbConnect(drv=RSQLite::SQLite(), DBNAME='Prueba')
dbListTables(con)
con <- dbConnect(drv=RSQLite::SQLite(), DBNAME='Prueba')
dbListTables(con)
con <- dbConnect(SQLite())
as.data.frame(dbListTables(con))
con <- dbConnect(SQLite(), ':memory:')
as.data.frame(dbListTables(con))
dbListTables(con)
con <- dbConnect(SQLite(), 'C:/Users/Asus/Documents/Prueba Adres')
setwd('C:/Users/Asus/Documents/Prueba Adres')
getwd()
con <- dbConnect(SQLite())
as.data.frame(dbListTables(con))
dbListTables(con)
file.info("test.db")
file.info("Prueba.db")
getwd()
getwd() + '/'
paste(getwd(),  '/')
con <- dbConnect(drv, dbname = 'C:/Users/Asus/Documents/Prueba Adres/SQLite/to/Prueba.db')
dvr <- dbDriver('RSQLite')
con <- dbConnect(drv, dbname = 'C:/Users/Asus/Documents/Prueba Adres/SQLite/to/Prueba.db')
dvr <- dbDriver('RSQLite')
dvr <- RSQLite::dbDriver('RSQLite')
dvr <- RSQLite::dbDriver('SQLite')
con <- dbConnect(drv, dbname = 'C:/Users/Asus/Documents/Prueba Adres/SQLite/to/Prueba.db')
con <- dbConnect(dbname = 'C:/Users/Asus/Documents/Prueba Adres/SQLite/to/Prueba.db')
con <- dbConnect(drv=RSQLite::SQLite(), DBNAME='Prueba')
con <- dbConnect(drv=RSQLite::SQLite() dbname= 'C:/Users/Asus/Documents/Prueba Adres/SQLite/to/Prueba.db')
con <- dbConnect(drv=RSQLite::SQLite(), dbname= 'C:/Users/Asus/Documents/Prueba Adres/SQLite/to/Prueba.db')
con <- dbConnect(drv=RSQLite::SQLite(), dbname= 'C:/Users/Asus/Documents/Prueba Adres/SQLite/to/Prueba.db')
con <- dbConnect(drv=RSQLite::SQLite(), dbname= 'C:/Users/Asus/Documents/Prueba Adres/SQLite/to/Prueba.db')
con <- dbConnect(drv=RSQLite::SQLite(), dbname= 'C:/Users/Asus/Documents/Prueba Adres/SQLite/Prueba.db')
